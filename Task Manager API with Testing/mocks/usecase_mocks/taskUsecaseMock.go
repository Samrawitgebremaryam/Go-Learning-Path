// Code generated by mockery v2.44.1. DO NOT EDIT.
package usecase_mocks

import (
	domain "Task_Manager/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// DeleteTask provides a mock function with given fields: ctx, id, isAdmin, userId
func (_m *TaskUsecase) DeleteTask(ctx context.Context, id primitive.ObjectID, isAdmin string, userId primitive.ObjectID) error {
	ret := _m.Called(ctx, id, isAdmin, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id, isAdmin, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: ctx, id, isAdmin, userId
func (_m *TaskUsecase) GetTaskById(ctx context.Context, id primitive.ObjectID, isAdmin string, userId primitive.ObjectID) (domain.Task, error) {
	ret := _m.Called(ctx, id, isAdmin, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string, primitive.ObjectID) (domain.Task, error)); ok {
		return rf(ctx, id, isAdmin, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string, primitive.ObjectID) domain.Task); ok {
		r0 = rf(ctx, id, isAdmin, userId)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, isAdmin, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx, isAdmin, userId
func (_m *TaskUsecase) GetTasks(ctx context.Context, isAdmin string, userId primitive.ObjectID) ([]domain.Task, error) {
	ret := _m.Called(ctx, isAdmin, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, primitive.ObjectID) ([]domain.Task, error)); ok {
		return rf(ctx, isAdmin, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, primitive.ObjectID) []domain.Task); ok {
		r0 = rf(ctx, isAdmin, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, primitive.ObjectID) error); ok {
		r1 = rf(ctx, isAdmin, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTask provides a mock function with given fields: ctx, newTask
func (_m *TaskUsecase) PostTask(ctx context.Context, newTask domain.Task) error {
	ret := _m.Called(ctx, newTask)

	if len(ret) == 0 {
		panic("no return value specified for PostTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) error); ok {
		r0 = rf(ctx, newTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutTask provides a mock function with given fields: ctx, updatedTask, id, isAdmin, userId
func (_m *TaskUsecase) PutTask(ctx context.Context, updatedTask domain.Task, id primitive.ObjectID, isAdmin string, userId primitive.ObjectID) error {
	ret := _m.Called(ctx, updatedTask, id, isAdmin, userId)

	if len(ret) == 0 {
		panic("no return value specified for PutTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task, primitive.ObjectID, string, primitive.ObjectID) error); ok {
		r0 = rf(ctx, updatedTask, id, isAdmin, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
