// Code generated by mockery v2.44.1. DO NOT EDIT.

package repomocks

import (
	domain "Task_Manager/domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserRepository) DeleteUser(id primitive.ObjectID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoginUser provides a mock function with given fields: user
func (_m *UserRepository) LoginUser(user domain.User) (int, error, string) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 int
	var r1 error
	var r2 string
	if rf, ok := ret.Get(0).(func(domain.User) (int, error, string)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(domain.User) string); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// RegisterUser provides a mock function with given fields: user
func (_m *UserRepository) RegisterUser(user domain.User) (int, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (int, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
