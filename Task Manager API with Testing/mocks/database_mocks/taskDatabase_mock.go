package database_mocks

import (
	"Task_Manager/domain"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskDatabase is an autogenerated mock type for the TaskDatabase type
type TaskDatabase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: task
func (_m *TaskDatabase) CreateTask(task domain.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id, filter
func (_m *TaskDatabase) DeleteTask(id primitive.ObjectID, filter interface{}) error {
	ret := _m.Called(id, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, interface{}) error); ok {
		r0 = rf(id, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindTaskByID provides a mock function with given fields: id, filter
func (_m *TaskDatabase) FindTaskByID(id primitive.ObjectID, filter interface{}) (domain.Task, error) {
	ret := _m.Called(id, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindTaskByID")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, interface{}) (domain.Task, error)); ok {
		return rf(id, filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, interface{}) domain.Task); ok {
		r0 = rf(id, filter)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, interface{}) error); ok {
		r1 = rf(id, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTasks provides a mock function with given fields: filter
func (_m *TaskDatabase) FindTasks(filter interface{}) ([]domain.Task, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for FindTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]domain.Task, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []domain.Task); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: id, update
func (_m *TaskDatabase) UpdateTask(id primitive.ObjectID, update interface{}) error {
	ret := _m.Called(id, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, interface{}) error); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskDatabase creates a new instance of TaskDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskDatabase {
	mock := &TaskDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
